<apex:page standardController="Contact_Event__c" extensions="addContactEventAttendees" title="Add Attendees to Contact Event" id="AddAttendees">
    <!-- ********* JAVASCRIPT USED TO TOGGLE SELECTION OF SEARCH RESULTS ************ -->
    <script  type="text/javascript">
    function customSelectChecked(form, element_name, value)
    {   
        var i = 0;
        for (i = 0; i < form.elements.length; i++) {
            if (form.elements[i].name.search('selected') > 0 && form.elements[i].disabled == false) {
                form.elements[i].checked = value;
            }
        }
    }    
    function customSelectAllOrNoneByCheckbox(form, element_name, control)
    {  customSelectChecked(form, element_name, control.checked); }
    </script>
    
    <apex:form id="txfrContactsForm" >
        <apex:messages />
        <!-- 
        -- Comment/Uncomment one of the following two lines to enable debugging in page controller.
        --    DEGUGTRUE = Show SOQL statement and results of query
        -->
        <!-- <apex:inputHidden id="DebugSetting" value="{!SetDebugModeTRUE}"/>    -->
        <apex:inputHidden id="DebugSetting" value="{!SetDebugModeFALSE}"/>
        <apex:pageBlock title="Search for Clients" id="Page" helpTitle="Entering Criteria" helpUrl="https://na1.salesforce.com/help/doc/en/reports_filter.htm">

        <!-- ********* THE [SEARCH] BUTTON ************ -->
        <apex:pageBlockButtons >
            <apex:commandButton title="Find" value="Find" action="{!doSearch}"/>
            <apex:commandButton title="Cancel" value="Cancel" action="{!cancel}"/>
        </apex:pageBlockButtons>
        
        <!-- ********* SEARCH CRITERIA ************ -->
        <apex:pageBlockSection columns="1" title="Enter text to search for" collapsible="false" id="Criteria" >
            <apex:inputtext id="SearchText" value="{!searchText}"/>
        </apex:pageBlockSection>
    </apex:pageBlock>
    <!-- </apex:form> -->
    
    <!-- ********* DISPLAY THE SEARCH RESULTS ************ -->
    <!-- Search Results Columns:
    --     The Query in the Page Controller is written to include ALL fields from the Contact object 
    --     along with the following fields from the Account, Contact.Owner, and Account.Owner objects.
    --     The columns displayed in the list below can be changed by the user in the VisualForce page
    --     by just referencing the column name. The advantage is that the Apex code does not need to be
    --     modified to do this, which means changes to the VF page can be made in Production without 
    --     requiring redeploying the change from a Sandbox/Dev instance into Production.
    --            example: to add a custom field "practice", add or change a column to Results.contact.practice__c
    -- 
    --     Additional Fields Available for use in Columns:
    --        contact.Account.Name, contact.Account.Site, contact.Account.Industry, contact.Account.Type
    --        contact.Owner.Name, contact.Owner.Alias
    --        contact.Account.Owner.Name, contact.Account.Owner.Alias
    -->
    <apex:outputPanel id="Results" layout="block" style="{!ShowBlockIfResults}">
    <!--  <apex:form id="resultsForm" >  -->
        <apex:pageBlock id="resultsBlock">
        <apex:pageBlockButtons >
            <apex:commandButton title="Add Selected" value="Add Selected" action="{!doSave}"/>
        </apex:pageBlockButtons>
            <apex:dataTable value="{!searchResults}" var="Results" id="resultsDataTable" 
            styleClass="tableClass list"
            rowClasses="odd,even"
            onrowmouseout="if (window.hiOff){hiOff(this);}" 
            onrowmouseover="if (window.hiOn){hiOn(this);}"> 
                <apex:facet name="caption"></apex:facet>
                <apex:facet name="header"></apex:facet>
                <apex:column >
                    <apex:facet name="header"><apex:inputCheckbox id="selectall" selected="false" 
                        onclick="javascript:customSelectAllOrNoneByCheckbox(document.forms['AddAttendees:txfrContactsForm'],'AddAttendees:txfrContactsForm:resultsBlock:resultsDataTable:', this);"/></apex:facet>
                    <apex:inputCheckbox value="{!Results.selected}" id="selected" />
                </apex:column>
                <apex:column >
                    <apex:facet name="header">Name</apex:facet>
                    <apex:outputLink target="_blank" value="{!URLFOR($Action.Contact.View, Results.contact.ID)}" >{!Results.contact.name}</apex:outputLink>
                </apex:column>
                <apex:column >
                    <apex:facet name="header">Record Type</apex:facet>
                    {!Results.contact.recordtype.name}
                </apex:column>
                <apex:column >
                    <apex:facet name="header">Home Phone</apex:facet>
                    {!Results.contact.homephone}
                </apex:column>
                <apex:column >
                    <apex:facet name="header">Postcode</apex:facet>
                    {!Results.contact.mailingpostalcode}
                </apex:column>
            </apex:dataTable>
        <!-- </apex:pageBlock> -->
     </apex:pageBlock>
     </apex:outputPanel>        
     </apex:form>
</apex:page>